name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: parch
            binary: parch
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: parch.exe
            binary: parch.exe

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && contains(matrix.target, 'windows')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifacts
          if [ -f "target/${{ matrix.target }}/release/${{ matrix.binary }}" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.binary }} artifacts/${{ matrix.name }}
            echo "Successfully copied binary to artifacts/${{ matrix.name }}"
          else
            echo "Error: Binary not found at target/${{ matrix.target }}/release/${{ matrix.binary }}"
            exit 1
          fi

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          if (Test-Path "target\${{ matrix.target }}\release\${{ matrix.binary }}") {
            Copy-Item "target\${{ matrix.target }}\release\${{ matrix.binary }}" "artifacts\${{ matrix.name }}"
            Write-Host "Successfully copied binary to artifacts\${{ matrix.name }}"
          } else {
            Write-Host "Error: Binary not found at target\${{ matrix.target }}\release\${{ matrix.binary }}"
            exit 1
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: artifacts/${{ matrix.name }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten artifacts
        run: |
          mkdir -p release-artifacts
          find artifacts -type f -exec cp {} release-artifacts/ \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          draft: true
          generate_release_notes: true
          files: release-artifacts/*
